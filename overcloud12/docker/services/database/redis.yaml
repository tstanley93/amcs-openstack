heat_template_version: pike

description: >
  OpenStack containerized Redis services

parameters:
  DockerRedisImage:
    description: image
    type: string
  DockerRedisConfigImage:
    description: The container image to use for the redis config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json

resources:

  RedisBase:
    type: ../../../puppet/services/database/redis.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}

outputs:
  role_data:
    description: Role data for the Redis API role.
    value:
      service_name: {get_attr: [RedisBase, role_data, service_name]}
      config_settings:
        map_merge:
          - {get_attr: [RedisBase, role_data, config_settings]}
          - redis::daemonize: false
      logging_source: {get_attr: [RedisBase, role_data, logging_source]}
      logging_groups: {get_attr: [RedisBase, role_data, logging_groups]}
      step_config: &step_config
        get_attr: [RedisBase, role_data, step_config]
      service_config_settings: {get_attr: [RedisBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: 'redis'
        # NOTE: we need the exec tag to copy /etc/redis.conf.puppet to
        # /etc/redis.conf
        # https://github.com/arioch/puppet-redis/commit/1c004143223e660cbd433422ff8194508aab9763
        puppet_tags: 'exec'
        step_config: *step_config
        config_image: {get_param: DockerRedisConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/redis.json:
          command: /usr/bin/redis-server /etc/redis.conf
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/run/redis
              owner: redis:redis
              recurse: true
      docker_config:
        step_1:
          redis_init_logs:
            start_order: 0
            detach: false
            image: &redis_image {get_param: DockerRedisImage}
            privileged: false
            user: root
            volumes:
              - /var/log/containers/redis:/var/log/redis
            command: ['/bin/bash', '-c', 'chown -R redis:redis /var/log/redis']
          redis:
            start_order: 1
            image: *redis_image
            net: host
            privileged: false
            restart: always
            volumes:
              - /run:/run
              - /var/lib/kolla/config_files/redis.json:/var/lib/kolla/config_files/config.json:ro
              - /var/lib/config-data/puppet-generated/redis/:/var/lib/kolla/config_files/src:ro
              - /etc/localtime:/etc/localtime:ro
              - /var/log/containers/redis:/var/log/redis
            environment:
              - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
      host_prep_tasks:
        - name: create persistent directories
          file:
            path: "{{ item }}"
            state: directory
          with_items:
            - /var/log/containers/redis
            - /var/run/redis
        - name: redis logs readme
          copy:
            dest: /var/log/redis/readme.txt
            content: |
              Log files from redis containers can be found under
              /var/log/containers/redis.
          ignore_errors: true
      upgrade_tasks:
        - name: Check if redis is  deployed
          command: systemctl is-enabled --quiet redis
          tags: common
          ignore_errors: True
          register: redis_enabled
        - name: "PreUpgrade step0,validation: Check if redis is running"
          command: systemctl is-active --quiet redis
          when: redis_enabled.rc == 0
          tags: step0,validation
        - name: Stop and disable redis service
          tags: step2
          when: redis_enabled.rc == 0
          service: name=redis state=stopped enabled=no
